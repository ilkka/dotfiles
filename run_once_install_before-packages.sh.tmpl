{{ if or (eq .chezmoi.os "linux") (eq .chezmoi.os "darwin") -}}
#!/usr/bin/env bash
set -euo pipefail

function info() {
  starline=$(printf '%*s' "${#1}"|sed 's/ /*/g')'****'
  echo "$starline"
  echo "* ${1} *"
  echo "$starline"
  echo
}

# first of all install homebrew if not found
if ! command -v brew &>/dev/null; then
  info "Installing homebrew, this might prompt for sudo"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

if [[ -x /opt/homebrew/bin/brew ]]; then
  brewdir="/opt/homebrew"
elif [[ -d /usr/local/bin/brew ]]; then
  brewdir="/usr/local"
else
  brewdir="/home/linuxbrew/.linuxbrew"
fi
eval "$(${brewdir}/bin/brew shellenv)"

info "Installing homebrew packages"
brew bundle --no-lock --file=/dev/stdin <<EOF
brew "asdf"
brew "atuin"
brew "bat"
brew "bottom"
brew "btop"
brew "direnv"
brew "exa"
brew "fd"
brew "fzf"
brew "gdu"
brew "gh"
brew "git-delta"
brew "go-task"
brew "helm"
brew "htop"
brew "k9s"
brew "kubernetes-cli"
brew "lazydocker"
brew "lazygit"
brew "neovim"
brew "oh-my-posh"
brew "ripgrep"
brew "rustup"
brew "skaffold"
brew "walk"
EOF

{{ if eq .chezmoi.os "darwin" -}}
info "Installing casks"
brew bundle --no-lock --file=/dev/stdin <<EOF
tap "homebrew/cask"
cask_args appdir: "~/Applications", require_sha: true
cask "firefox"
cask "rancher"
cask "visual-studio-code"
cask "slack"
cask "signal"
cask "telegram"
cask "todoist"
tap "homebrew/cask-fonts"
cask "font-fira-code"
cask "font-intone-mono-nerd-font"
cask "font-jetbrains-mono-nerd-font"
EOF
{{ end -}}

# asdf plugins
declare -a asdf_plugins=( \
  elixir                  \
  erlang                  \
  golang                  \
  nodejs                  \
)

. ${brewdir}/opt/asdf/libexec/asdf.sh

# install asdf plugins
for plugin in "${asdf_plugins[@]}"
do
  asdf plugin add "$plugin"
done

{{ if eq .chezmoi.os "linux" -}}
{{ if eq .chezmoi.osRelease.idLike "debian" -}}
# seems this is debian or ubuntu

# repos to add, defined as strings with the following format:
# "reponame%%signing-key%%apt-definition"
# repos are saved using the reponame, signing keys are downloaded
# and saved as their basename in /usr/share/keyrings
declare -a repos=( \
  "1password%%https://downloads.1password.com/linux/keys/1password.asc%%deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/1password.gpg] https://downloads.1password.com/linux/debian/$(dpkg --print-architecture) stable main" \
)

# tools to install
declare -a apt_packages=( \
  1password-cli           \
  build-essential         \
  fish                    \
)

if [[ "${#repos[@]}" -gt 0 ]]; then
  # need curl and gpg
  if ! command -v curl &>/dev/null || ! command -v gpg &>/dev/null; then
    sudo -p "sudo as %u@%h to install curl and gpg: " apt-get update && sudo apt-get install -y --no-install-recommends curl gpg
  fi

  # add repos
  for repo in "${repos[@]}"; do
    name=$(echo $repo|awk 'BEGIN { FS="%%" }; { print $1 }')
    keyurl=$(echo $repo|awk 'BEGIN { FS="%%" }; { print $2 }')
    config=$(echo $repo|awk 'BEGIN { FS="%%" }; { print $3 }')

    echo "Configuring repo for $name"
    listfile="/etc/apt/sources.list.d/${name}.list"
    if [[ -f "$listfile" ]]; then
      echo "${listfile} exists, not doing anything"
    else
      if [[ -n "$keyurl" ]]; then
        echo "Getting key"
        curl -sS "$keyurl" | sudo -p "sudo as %u@%h to install repo signing key: " gpg --dearmor --output /usr/share/keyrings/$(basename $keyurl | sed -E 's/\.[^.]*/-keyring.gpg')
      fi
      echo "Adding repo config"
      echo $config | sudo -p "sudo as %u@%h to install repo config: " tee "$listfile"
    fi
  done
  sudo -p "sudo as %u@%h to update sources: " apt-get update
fi

# install packages
sudo -p "sudo as %u@%h to install packages: " apt-get install -y --no-install-recommends "${apt_packages[@]}"
{{ else -}}
if command -v pacman &>/dev/null; then
  # seems like this is an arch-like distro
  info "Sudoing to install tools"
  sudo -p "sudo as %u@%h to install yay: " pacman -S yay
fi
{{ end -}}
{{ end -}}
{{ end -}}
