# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
*i*) ;;
*) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
  PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
  ;;
*)
  ;;
esac

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
  . ~/.bash_aliases
fi

[[ $PS1 && -f /usr/share/bash-completion/bash_completion ]] && \
  . /usr/share/bash-completion/bash_completion

# prompty prompt
eval "$($HOME/.local/bin/oh-my-posh init bash --config $HOME/.poshthemes/agnosterplus.omp.json)"

# user local bindir
if [[ -d $HOME/.local/bin ]]; then
  PATH="$HOME/.local/bin:$PATH"
fi

# cargo
[ -f "$HOME/.cargo/env" ] && . "$HOME/.cargo/env"

if [[ -d /usr/local/go/bin ]]; then
  PATH="/usr/local/go/bin:$PATH"
fi

if [[ -d $HOME/go/bin ]]; then
  PATH="$HOME/go/bin:$PATH"
fi

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# escripts
if [[ -d "$HOME/.mix/escripts" ]]; then
  PATH="$HOME/.mix/escripts:$PATH"
fi

# 1password ssh agent?
{{ if eq .environment "home" -}}
if [[ -f "$HOME/.1password/agent-bridge.sh" ]]; then
  . "$HOME/.1password/agent-bridge.sh"
fi
{{- end }}
if [[ -e "$HOME/.1password/agent.sock" ]]; then
  export SSH_AUTH_SOCK=$HOME/.1password/agent.sock
fi

if command -v nvim &>/dev/null; then
  export EDITOR=nvim
fi

if command -v atuin &>/dev/null; then
  [[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh
  eval "$(atuin init bash)"
fi

# walk
if command -v walk &>/dev/null; then
  function lk {
    cd "$(walk --icons "$@")"
  }
fi

if [[ -d "$HOME/.deno" ]]; then
  export DENO_INSTALL="$HOME/.deno"
  export PATH="$DENO_INSTALL/bin:$PATH"
fi

# bun
if [[ -d "$HOME/.bun" ]]; then
  export BUN_INSTALL="$HOME/.bun"
  export PATH=$BUN_INSTALL/bin:$PATH
fi

# asdf
if [[ -d "$HOME/.asdf" ]]; then
  . "$HOME/.asdf/asdf.sh"
  . "$HOME/.asdf/completions/asdf.bash"
fi

# if local file exists, source that
if [[ -r "$HOME/.bashrc.local" ]]; then
  source "$HOME/.bashrc.local"
fi
